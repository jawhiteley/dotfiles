" Jonathan Whiteley     2015-12-14
" Personal settings for Vim common to all platforms and systems

" Prevent vim from emulating the original vi's bugs and limitations
" Before doing anything else
set nocompatible

" Path to vimrc file: this should be set in the vimrc file itself, which calls
" this one.
" Folder in which this script resides: (not safe for symlinks)
let s:path = resolve( expand('<sfile>:p:h') )

" ================================================================
" Load platform-specific settings
if has('macunix')
  " do stuff for Mac
  let g:vimf_path .= '/.vim'
  " Fullscreen options 
  if has('gui_macvim')
    set fuoptions=maxvert,maxhorz
    set lines=64 columns=96
  endif
elseif has('unix')
  " do stuff for Unix
  let g:vimf_path .= '/.vim'
elseif has('win32') || has ('win64')
  " do stuff for Windows
  "let g:vimf_path .= '/vimfiles'   " I usually keep my vimrc file *inside* /vimfiles on Windows
  source <sfile>:h/mswin.vim
endif


" ================================================================
" PLUGINS - managed with vim-plug
" https://github.com/junegunn/vim-plug
"  Requires git
"  http://git-scm.com/download/
" See also Vundle documentation for similar examples
"  https://github.com/VundleVim/Vundle.vim

" Plugins managed this way will not be available until after plug#end(); this
" is what 'loads' them.

if v:version >= 700     " try only works in vim 7 or later
  try       " in case plug.vim is not installed.

    call plug#begin(g:vimf_path . '/Plugins') " make path system-independent?

    " sensible default settings; I already use many of these here.
    Plug 'tpope/vim-sensible'
    " Automatic text alignment
    Plug 'Align'
    " Manage 'surroundings': quotes, parentheses, XML tags, etc.
    Plug 'surround.vim'
    " matchit: extended % matching for HTML, LaTeX, and many other languages
    Plug 'matchit.zip'
    " SnipMate: TextMate-style snippets for Vim
    Plug 'snipMate'

    " Vim + R : order matters
    Plug 'jalvesaq/R-Vim-runtime'
    "Plug 'Vim-R-plugin'    " deprecated
    Plug 'jalvesaq/Nvim-R'

    " Markdown preview? [check path]
    " Plug 'vim-scripts/markdown-preview.vim'

    " Solarized colour scheme --- http://ethanschoonover.com/solarized
    Plug 'altercation/vim-colors-solarized'

    " Add plugins to &runtimepath
    call plug#end()

  catch
  endtry
endif

syntax enable 
filetype plugin on 
filetype indent on 


" ================================================================
" General Settings, behaviour
" search settings
set incsearch           " Incremental search
set hlsearch            " Highlight search match
set ignorecase          " Do case insensitive matching
set smartcase           " do not ignore if search pattern has CAPS

" directory settings
set nobackup            " do not write backup files
"set noswapfile          " do not write .swp files

" change the local working directory of the window to be the same as the
" current file:
if has("autocmd")
  " autocmd BufEnter * silent! lcd %:p:h
endif

" Format options
" Only change one at a time!
" :help formatoptions
" :help fo-table
" t: auto-wrap text to textwidth
" c: auto-wrap comments to textwidth
" o: extend comments on o or O
" j: strip comment leader when joining lines: not available in older versions (hence, the silent!)
silent! set formatoptions-=t fo-=c fo-=o
" q: allow formatting of comments with 'gq'
silent! set formatoptions+=q fo+=r fo+=n fo+=j fo+=l fo+=w
" Need an autocmd on new buffer to ensure changes are made *after* filetype plugins are loaded. :(
autocmd BufNewFile,BufRead * silent! setlocal formatoptions-=t fo-=c fo-=o
autocmd BufNewFile,BufRead * silent! setlocal formatoptions+=r fo+=q fo+=n fo+=j fo+=l fo+=w

" ================================================================
" Display Appearance & Style
if has('gui_running')
  set guioptions-=T " hide toolbar by default
  set guifont=Consolas:h12  " set font face and size. I like Consolas or Menlo
endif

set number          " show line numbers
set ruler	        " show the cursor position all the time
set lsp=2           " Line-spacing: # pixels between lines
set linebreak		" wrap long lines *between* words

" Colours
  " dark schemes are easier for editing a lot of code
  " lighter schemes are easier on the eyes when 
  " switching with other applications with a light bg
  " preferred dark  schemes: solarized-dark, zenburn, wood, desert, darkerdesert 
  " preferred light schemes: solarized-light, beachcomber, sand, proton, neutron, earthburn, khaki, vylight
silent! colorscheme zenburn
set background=light
if has('gui_running')
  silent! colorscheme solarized
else
  " solarized looks terrible in terminal, unless it is configured to use Solarized's palette
  let g:solarized_termcolors=256    " do this *before* changing the colorscheme to solarized.
endif
" not included in MacVim, but worth checking out ( ^ popular, * like ):
  " http://code.google.com/p/vimcolorschemetest/
  " light:  autumn, biogoo, colorful, dawn, delphi, earthburn, emacs, google,
  "         ironman, jhlight, lightcolors, louver, moria, nedit, oceanlight,
  "         osx_like, peaksea, proton, sienna, tidy *, vylight, xemacs
  " cream:  wood *, autumn2, beachcomber *, buttercream, khaki, LightTan, LightYellow,
  "         mellow X, sand *, sf, navajo ^
  " medium: blackdust, camo, freya, kellys, two2tango, whitedust
  " dark:   ir_black ^, wombat ^, wombat256, desertEX, evening, industrial, inkpot,
  "         neon, revolutions, slate2, watermark, xoria256
  " low-contrast light:
  "     earthburn, oceanlight, proton *, neutron, donbass
  " low-contrast dark:
  "     blackdust, carvedwood, carvedwoodcool, coffee, darker-robin,
  "     darkerdesert *, hhazure, industrial, watermark, zenburn *^
  " Solarized^*:  http://ethanschoonover.com/solarized


" Indentation.  Oy.
set autoindent      " copy indent from current line when starting a new one (except with #)
set smartindent     " do smart 'autoindenting' when starting a new line
set expandtab		" indent with spaces - do not use actual <TAB> characters.
set tabstop=4       " where tabstops are placed (every X columns)
set softtabstop=4   " tab indents rather than inserting <TAB>
set shiftwidth=2    " # of spaces for indentation


" Custom key bindings

" <C-]> goes to a linked tag, <C-T> goes back.  
" Why not use <C-[> to do the same? (easier mnemonic)
" Note: <Esc> is also often mapped to <C-T> by default.
if has('gui_running')
  " [this triggers E73 error in terminal vim on mac: silent! does not help]
  silent! noremap <C-[> <C-T>
endif
" Vim MarkDown Preview
noremap <leader>p :Mm<CR>
" conflicts with Vim-R plugin: map <D-CR> :Mm<CR>



" ================================================================
" Additional settings for Vim-R-plugin (replaced by Nvim-R)
let vimrplugin_i386 = 1         "use 32-bit version of R (a little faster)
let vimrplugin_r_args = "--sdi --no-save"
let r_indent_ess_comments = 1   "indent R comments like in ESS.
let r_syntax_folding = 1        "automatically fold code based on syntax
let vimrplugin_underscore = 0   "do not replace underscores with ' <- '
let vimrplugin_assign = 2       "use two underscores to insert assignment operator ' <- '
"let vimrplugin_assign_map = '--' "what to convert into ' <- '; not working?
" .vim/ftplugin/r_jaw.vim contains custom key maps for the assignment operator
" in R files.

" Nvim-R settings
"let R_assign_map = "<M-->"
let R_assign = 2    "2 underscores will insert assignment operator

" vim-R-plugin custom key bindings 
" also see .vim/ftplugin/r_jaw.vim
" smartindent: do not ignore lines starting with #: X CTL-V CTL-H #
inoremap # X#

" Custom key bindings
map <D-CR> <Plug>RSendLine
" imap <D-CR> <Plug>RSendLine
" vmap <D-CR> <Plug>RSendLine
nmap <F3> <Plug>RDSendLine
imap <F3> <Plug>RDSendLine
vmap <F3> <Plug>RDSendSelection



" ================================================================
" FUNCTIONS

" SuperCleverTab from
" http://blogs.gnome.org/lharris/2008/07/20/code-completion-with-vim-7/
function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return "\<C-N>"
        endif
    endif
endfunction

inoremap <C-Tab> <C-R>=SuperCleverTab()<cr>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

